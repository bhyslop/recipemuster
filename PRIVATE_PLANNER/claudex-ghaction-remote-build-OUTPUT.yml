name: Container Build and Upload

on:
  workflow_dispatch:
  repository_dispatch:
    types: [build_containers]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Load configuration
      id: config
      run: |
        if [ ! -f rbm-config.yml ]; then
          echo "Error: rbm-config.yml not found in repository root"
          exit 1
        fi
        echo "::set-output name=config::$(cat rbm-config.yml | base64 -w 0)"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate timestamp
      id: timestamp
      run: echo "::set-output name=value::$(date +'%Y%m%d__%H%M%S')"

    - name: Find Dockerfiles
      id: find_dockerfiles
      run: |
        config=$(echo "${{ steps.config.outputs.config }}" | base64 -d)
        recipes_dir=$(echo "$config" | yq e '.recipes_dir' -)
        recipe_pattern=$(echo "$config" | yq e '.recipe_pattern' -)
        echo "::set-output name=dockerfiles::$(find $recipes_dir -name "$recipe_pattern" | jq -R -s -c 'split("\n")[:-1]')"

    - name: Build and push images
      env:
        DOCKERFILES: ${{ steps.find_dockerfiles.outputs.dockerfiles }}
        TIMESTAMP: ${{ steps.timestamp.outputs.value }}
        CONFIG: ${{ steps.config.outputs.config }}
      run: |
        config=$(echo "$CONFIG" | base64 -d)
        history_dir=$(echo "$config" | yq e '.history_dir' -)
        build_architectures=$(echo "$config" | yq e '.build_architectures' -)

        mkdir -p "$history_dir"

        for dockerfile in $(echo "$DOCKERFILES" | jq -r '.[]'); do
          filename=$(basename "$dockerfile" | sed -E 's/\.dockerfile$//')
          short_hash=$(git rev-parse --short HEAD)
          build_label="${filename}.${short_hash}.${TIMESTAMP}"
          history_subdir="${history_dir}/${build_label}"

          if [ -d "$history_subdir" ]; then
            echo "Error: History directory $history_subdir already exists"
            exit 1
          fi

          mkdir -p "$history_subdir"
          cp "$dockerfile" "$history_subdir/"
          echo "$(git rev-parse HEAD)" > "${history_subdir}/commit.txt"

          image_tag="ghcr.io/${{ github.repository }}:${build_label}"

          if docker manifest inspect "$image_tag" > /dev/null 2>&1; then
            echo "Error: Image tag $image_tag already exists"
            continue
          fi

          build_start=$(date +%s)
          docker buildx build --platform "$build_architectures" -t "$image_tag" -f "$dockerfile" . | tee "${history_subdir}/history.txt"
          build_end=$(date +%s)
          build_duration=$((build_end - build_start))

          if [ $? -eq 0 ]; then
            docker push "$image_tag"
            image_size=$(docker image inspect "$image_tag" --format='{{.Size}}')
            echo "Size: $image_size" > "${history_subdir}/digest.txt"
            echo "Duration: $build_duration seconds" >> "${history_subdir}/digest.txt"
          fi

          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add "$history_subdir"
          git commit -m "Add build history for ${build_label}"
          git push
        done

    - name: Clean up
      run: docker system prune -af

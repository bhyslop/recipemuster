# Google Cloud Build for Recipe Bottle RBIA
# - All steps use Google-curated builders, EXCEPT the single binfmt setup step.
# - Builds multi-arch (linux/amd64,linux/arm64) with buildx.
# - Pushes a minimal image.
# - Writes all provenance and extras (SBOM, transcripts, etc.) to a separate metadata tarball.
# - Publishes the metadata tarball to Artifact Registry (Generic) as: package=${_RBGY_TAG}, version=metadata.
#
# Exit code discipline:
# - Every bash step uses: set -euo pipefail
# - No tee; transcript is captured without masking exit codes.

steps:
  # Configure Docker to push to GAR (auth handled by Cloud Build service account)
  - name: gcr.io/cloud-builders/gcloud
    id: auth-docker-to-gar
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        gcloud auth configure-docker "${_RBGY_GAR_LOCATION}-docker.pkg.dev" --quiet

  # Single non-Google image step allowed: install binfmt for multi-arch emulation
  - name: gcr.io/cloud-builders/docker
    id: binfmt-setup
    # This step intentionally runs a non-google image (tonistiigi/binfmt) per the rule.
    # The builder itself is Google-curated; the container it runs is not.
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        docker run --privileged --rm tonistiigi/binfmt --install arm64,amd64

  # Create and bootstrap a buildx builder (docker-container driver)
  - name: gcr.io/cloud-builders/docker
    id: buildx-create
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        docker buildx create --name rbia-builder --driver docker-container --use
        docker buildx inspect --bootstrap

  # Snapshot recipe and assemble build_info.json skeleton
  # Snapshot recipe and assemble build_info.json skeleton
  - name: gcr.io/cloud-builders/gcloud
    id: prepare-metadata-files
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        : "${_RBGY_DOCKERFILE:?missing}"
        : "${_RBGY_TAG:?missing}"
        : "${_RBGY_MONIKER:?missing}"
        : "${_RBGY_PLATFORMS:?missing}"
        : "${_RBGY_GIT_COMMIT:?missing}"
        : "${_RBGY_GIT_BRANCH:?missing}"
        : "${_RBGY_GIT_REPO:?missing}"
        : "${BUILD_ID:?missing}"

        # Recipe snapshot
        cp "${_RBGY_DOCKERFILE}" recipe.txt

        # Build info (no jq dependency; write plain JSON)
        TS="$(date -u +%FT%TZ)"
        : > build_info.json
        printf '{\n'                                          >> build_info.json
        printf '  "tag": "%s",\n'       "${_RBGY_TAG}"        >> build_info.json
        printf '  "moniker": "%s",\n'   "${_RBGY_MONIKER}"    >> build_info.json
        printf '  "git": {\n'                                 >> build_info.json
        printf '    "repo": "%s",\n'    "${_RBGY_GIT_REPO}"   >> build_info.json
        printf '    "branch": "%s",\n'  "${_RBGY_GIT_BRANCH}" >> build_info.json
        printf '    "commit": "%s"\n'   "${_RBGY_GIT_COMMIT}" >> build_info.json
        printf '  },\n'                                       >> build_info.json
        printf '  "build": {\n'                               >> build_info.json
        printf '    "id": "%s",\n'       "${BUILD_ID}"        >> build_info.json
        printf '    "timestamp": "%s"\n' "${TS}"              >> build_info.json
        printf '  },\n'                                       >> build_info.json
        printf '  "platforms": "%s"\n' "${_RBGY_PLATFORMS}"   >> build_info.json
        printf '}\n'                                          >> build_info.json


  # Build & push the minimal image; capture a full transcript without tee and preserve exit status
  - name: gcr.io/cloud-builders/docker
    id: build-and-push
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        IMAGE_URI="${_RBGY_GAR_LOCATION}-docker.pkg.dev/${_RBGY_GAR_PROJECT}/${_RBGY_GAR_REPOSITORY}/${_RBGY_MONIKER}:${_RBGY_TAG}"

        # Simple runner that logs each command first, then executes, appending output to build.log.
        # No pipes around build commands -> no masking of statuses; set -e ensures fail-fast.
        printf '' > build.log
        run() { printf '$ %s\n' "$*" >> build.log; "$@" >> build.log 2>&1; }

        run docker buildx version
        run docker version
        run docker info

        # Buildx multi-arch build and push
        run docker buildx build \
          --platform="${_RBGY_PLATFORMS}" \
          --tag "${IMAGE_URI}" \
          --push \
          --label "moniker=${_RBGY_MONIKER}" \
          --label "git.commit=${_RBGY_GIT_COMMIT}" \
          --label "git.branch=${_RBGY_GIT_BRANCH}" \
          -f "${_RBGY_DOCKERFILE}" \
          .

        # Record the pushed image URI for downstream steps
        echo "${IMAGE_URI}" > .image_uri

  # Generate SBOM (syft JSON) and a human-readable package summary (table)
  # We stay within the Google-curated docker builder image; it runs the syft container.
  - name: gcr.io/cloud-builders/docker
    id: sbom-and-summary
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        IMAGE_URI="$(cat .image_uri)"
        # JSON SBOM
        docker run --rm anchore/syft:latest "${IMAGE_URI}" -o json > syft_analysis.json
        # Human-readable package summary
        docker run --rm anchore/syft:latest "${IMAGE_URI}" -o table > package_summary.txt

  # Package the metadata bundle (kept separate from the pushed image)
  - name: gcr.io/cloud-builders/gcloud
    id: make-metadata-tarball
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        tar -czf "${_RBGY_TAG}_metadata.tgz" \
          recipe.txt \
          build_info.json \
          syft_analysis.json \
          package_summary.txt \
          build.log

  # Publish metadata tarball to Artifact Registry (Generic) as package=${_RBGY_TAG}, version=metadata
  - name: gcr.io/cloud-builders/gcloud
    id: publish-gar-generic
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        gcloud artifacts files upload \
          --location="${_RBGY_GAR_LOCATION}" \
          --repository="${_RBGY_GAR_REPOSITORY}" \
          --project="${_RBGY_GAR_PROJECT}" \
          --package="${_RBGY_TAG}" \
          --version="metadata" \
          "${_RBGY_TAG}_metadata.tgz"

options:
  machineType: E2_HIGHCPU_8
  logging: CLOUD_LOGGING_ONLY

timeout: 1200s

# Required substitutions (all _RBGY_* per rule). Provide these via trigger/CLI.
substitutions:
  _RBGY_DOCKERFILE: Dockerfile
  _RBGY_TAG: dev
  _RBGY_MONIKER: rbia
  _RBGY_PLATFORMS: linux/amd64,linux/arm64
  _RBGY_GAR_LOCATION: us-central1
  _RBGY_GAR_PROJECT: your-project-id
  _RBGY_GAR_REPOSITORY: your-repo
  _RBGY_GIT_COMMIT: unknown
  _RBGY_GIT_BRANCH: unknown
  _RBGY_GIT_REPO: unknown


